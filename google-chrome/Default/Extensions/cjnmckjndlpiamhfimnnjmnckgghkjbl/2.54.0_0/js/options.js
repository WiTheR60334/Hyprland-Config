var define_PARSER_NAMES_default=["A2OnlineJudgeProblemParser","A2OnlineJudgeContestParser","ACMPProblemParser","AcWingProblemParser","AizuOnlineJudgeProblemParser","AizuOnlineJudgeBetaProblemParser","AlgoZenithNewProblemParser","AlgoZenithOldProblemParser","AnarchyGolfProblemParser","AtCoderProblemParser","AtCoderContestParser","BaekjoonOnlineJudgeProblemParser","BAPSOJProblemParser","BeecrowdProblemParser","BeecrowdContestParser","BloombergCodeConProblemParser","BUCTOJProblemParser","BUCTOJContestParser","CodeChefNewProblemParser","CodeChefOldProblemParser","CodeChefContestParser","CodeDrillsProblemParser","CodeforcesProblemParser","CodeforcesContestParser","CodeMarshalProblemParser","CodeMarshalContestParser","COJProblemParser","COJContestParser","ContestHunterProblemParser","ContestHunterContestParser","CPythonUZProblemParser","CPythonUZContestParser","CSAcademyProblemParser","CSESProblemParser","CSESContestParser","CSUACMOnlineJudgeProblemParser","CSUACMOnlineJudgeContestParser","DimikOJProblemParser","DMOJProblemParser","DMOJContestParser","DOMjudgeContestParser","ECNUOnlineJudgeProblemParser","ECNUOnlineJudgeContestParser","EolympNormalProblemParser","EolympBasecampProblemParser","EolympNormalContestParser","EolympBasecampContestParser","FZUOnlineJudgeProblemParser","FZUOnlineJudgeContestParser","GoogleCodingCompetitionsProblemParser","HackerEarthProblemParser","HackerEarthCodeArenaParser","HackerEarthContestParser","HackerRankProblemParser","HackerRankContestParser","HDOJNewProblemParser","HDOJProblemParser","HDOJNewContestParser","HDOJContestParser","HITOnlineJudgeProblemParser","HihoCoderProblemParser","HihoCoderContestParser","HKOIOnlineJudgeProblemParser","HKOIOnlineJudgeContestParser","HrbustOnlineJudgeProblemParser","HydroProblemParser","HydroContestParser","InfoArenaProblemParser","ITCoderHUTECHProblemParser","JutgeProblemParser","KattisProblemParser","KattisContestParser","KilonovaProblemParser","KilonovaContestParser","LanqiaoProblemParser","LanqiaoContestParser","LibraryCheckerProblemParser","LibraryCheckerOldProblemParser","LibreOJProblemParser","LibreOJContestParser","LightOJProblemParser","LSYOIProblemParser","LuoguProblemParser","LuoguContestParser","MendoProblemParser","MetaCodingCompetitionsProblemParser","MrJudgeProblemParser","MSKInformaticsProblemParser","NepsAcademyProblemParser","NewtonSchoolProblemParser","NOJProblemParser","NOJContestParser","NowCoderProblemParser","OmegaUpProblemParser","OpenJudgeProblemParser","OpenJudgeContestParser","OTOGProblemParser","PandaOnlineJudgeProblemParser","PBInfoProblemParser","PEGJudgeProblemParser","PEGJudgeContestParser","POJProblemParser","POJContestParser","PTAProblemParser","QDUOJProblemParser","QDUOJContestParser","QQWhaleProblemParser","RoboContestProblemParser","RoboContestContestParser","SDUTOnlineJudgeProblemParser","SortMeProblemParser","SPOJProblemParser","SSOIERProblemParser","TheJobOverflowProblemParser","TimusOnlineJudgeProblemParser","TimusOnlineJudgeContestParser","TLXProblemParser","TLXContestParser","TophProblemParser","UDebugProblemParser","UOJProblemParser","UOJContestParser","USACOProblemParser","USACOTrainingProblemParser","UVaOnlineJudgeProblemParser","VirtualJudgeProblemParser","VirtualJudgeContestParser","XXMProblemParser","YandexProblemParser","YandexContestParser","YukicoderProblemParser","YukicoderContestParser","ZOJProblemParser","ZUFEOJProblemParser","ZUFEOJContestParser"];var browser=typeof globalThis.browser<"u"?globalThis.browser:globalThis.chrome;var Config=class{defaults={customPorts:[],customRules:[],requestTimeout:500,debugMode:!1};async get(key){return(await browser.storage.local.get(key))[key]||this.defaults[key]}set(key,value){return browser.storage.local.set({[key]:value})}},config=new Config;function noop(){}var customPortsInput=document.querySelector("#custom-ports"),customRulesContainer=document.querySelector("#custom-rules-container"),requestTimeoutInput=document.querySelector("#request-timeout"),debugModeInput=document.querySelector("#debug-mode");function updateCustomRules(){let rows=customRulesContainer.querySelectorAll(".custom-rules-row"),rules=[],invalidExpressions=[];rows.forEach(row=>{let expression=row.querySelector("input").value,parserName=row.querySelector("select").value;try{new RegExp(expression)}catch{invalidExpressions.push(expression)}rules.push([expression,parserName])}),rules[rules.length-1][0].length>0&&(rows[rows.length-1].querySelector("button").classList.remove("hidden"),addCustomRulesRow());let errorElem=document.querySelector("#custom-rules-error");if(invalidExpressions.length>0){let formattedExpressions=invalidExpressions.map(expression=>`'${expression}'`);if(formattedExpressions.length===1)errorElem.textContent=`The following regular expression is invalid: ${formattedExpressions[0]}`;else{let expressionList=formattedExpressions.slice(0,-1).join(", ")+" and "+formattedExpressions.slice(-1);errorElem.textContent=`The following regular expressions are invalid: ${expressionList}`}errorElem.classList.remove("hidden");return}errorElem.classList.add("hidden");let nonEmptyRules=rules.filter(rule=>rule[0].trim().length>0);config.set("customRules",nonEmptyRules).then(noop).catch(noop)}function addCustomRulesRow(regex,parserName){let row=document.createElement("div");row.classList.add("custom-rules-row");let input=document.createElement("input");input.placeholder="Regular expression",input.value=regex!==void 0?regex:"";let select=document.createElement("select");for(let parser of define_PARSER_NAMES_default){let option=document.createElement("option");option.value=parser,option.textContent=parser,option.selected=parser===parserName,parserName===void 0&&define_PARSER_NAMES_default[0]===parser&&(option.selected=!0),select.add(option)}let button=document.createElement("button");button.textContent="X",regex===void 0&&button.classList.add("hidden"),button.addEventListener("click",()=>{button.classList.contains("hidden")||(row.remove(),updateCustomRules())}),input.addEventListener("input",()=>updateCustomRules()),select.addEventListener("change",()=>updateCustomRules()),row.appendChild(input),row.appendChild(select),row.appendChild(button),customRulesContainer.appendChild(row)}customPortsInput.addEventListener("input",function(){let ports=this.value.split(",").map(x=>x.trim()).filter(x=>x.length>0).map(x=>Number(x)),uniquePorts=[...new Set(ports)],errorElem=document.querySelector("#custom-ports-error");uniquePorts.some(isNaN)||uniquePorts.some(x=>x<0)?errorElem.classList.add("hidden"):(errorElem.classList.remove("hidden"),config.set("customPorts",uniquePorts).then(noop).catch(noop))});requestTimeoutInput.addEventListener("input",function(){let value=this.valueAsNumber;config.set("requestTimeout",value<1?1:value).then(noop).catch(noop)});debugModeInput.addEventListener("input",function(){config.set("debugMode",this.checked).then(noop).catch(noop)});config.get("customPorts").then(value=>{customPortsInput.value=value.join(",")}).catch(noop);config.get("customRules").then(rules=>{for(let rule of rules)addCustomRulesRow(rule[0],rule[1]);addCustomRulesRow()}).catch(noop);config.get("requestTimeout").then(value=>{requestTimeoutInput.valueAsNumber=value}).catch(noop);config.get("debugMode").then(value=>{debugModeInput.checked=value}).catch(noop);
